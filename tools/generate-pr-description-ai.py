#!/usr/bin/env python3
"""
Generate AI-enhanced PR description from commit range
Usage: ./generate-pr-description-ai.py <base-sha> [output-file]
"""

import subprocess
import sys
import tempfile
import os
from pathlib import Path

# Add utils to path for model access
sys.path.append(str(Path(__file__).parent.parent / "utils"))
from model import make_gemini

def run_git_command(cmd: list[str]) -> str:
    """Run git command and return output"""
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
    return result.stdout.strip()

def extract_commit_data(base_sha: str) -> tuple[str, list[str], int]:
    """Extract commit messages, files, and count from git"""
    
    # Get commit messages with full bodies
    commits = run_git_command([
        "git", "log", "--pretty=format:%H%n%s%n%n%b%n---", 
        f"{base_sha}..HEAD"
    ])
    
    # Get affected files
    files = run_git_command([
        "git", "diff", "--name-only", f"{base_sha}..HEAD"
    ]).split('\n') if run_git_command([
        "git", "diff", "--name-only", f"{base_sha}..HEAD"
    ]) else []
    
    # Count commits
    commit_count = int(run_git_command([
        "git", "rev-list", "--count", f"{base_sha}..HEAD"
    ]))
    
    return commits, files, commit_count

def generate_ai_description(commits: str, files: list[str], commit_count: int, base_sha: str) -> str:
    """Use Gemini to generate a narrative PR description"""
    
    llm = make_gemini()
    
    prompt = f"""
You are helping generate a pull request description for a merge from a fork back to the main repository.

Here's the data:
- {commit_count} commits being merged
- Base SHA: {base_sha}
- Files changed: {len(files)} files

FILES CHANGED:
{chr(10).join(files)}

COMMIT HISTORY:
{commits}

Please generate a well-structured PR description that:

1. Provides a clear, high-level summary of what this batch of commits accomplishes
2. Groups related changes by theme/area (e.g., "Chess Analysis Improvements", "TV Companion Features", etc.)
3. Highlights the most significant changes and new features
4. Maintains a professional but engaging tone
5. Uses markdown formatting appropriately

The description should help reviewers understand both the scope and the progression of work.

Format as a complete markdown document suitable for a GitHub PR description.
"""

    response = llm.invoke(prompt)
    return response.content

def main():
    if len(sys.argv) < 2:
        print("Usage: ./generate-pr-description-ai.py <base-sha> [output-file]")
        print("Example: ./generate-pr-description-ai.py 8a4adf3d50a9c000029508756cc7ddc0c1dc49af pr-description.md")
        sys.exit(1)
    
    base_sha = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else "pr-description-ai.md"
    
    print(f"ü§ñ Generating AI-enhanced PR description from {base_sha} to HEAD...")
    
    try:
        # Extract git data
        print("üìù Extracting commit data...")
        commits, files, commit_count = extract_commit_data(base_sha)
        
        # Generate AI description
        print("üß† Generating narrative description with Gemini...")
        description = generate_ai_description(commits, files, commit_count, base_sha)
        
        # Add metadata footer
        head_sha = run_git_command(["git", "rev-parse", "HEAD"])
        footer = f"""

---

**Technical Details:**
- **Base SHA:** `{base_sha}`
- **Head SHA:** `{head_sha}`
- **Commits:** {commit_count}
- **Files Changed:** {len(files)}

*Generated by tools/generate-pr-description-ai.py*
"""
        
        # Write output
        with open(output_file, 'w') as f:
            f.write(description + footer)
        
        print(f"‚úÖ AI-enhanced PR description generated: {output_file}")
        print(f"üìä Summary: {commit_count} commits affecting {len(files)} files")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git command failed: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
